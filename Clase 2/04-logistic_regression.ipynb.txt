{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 04 - Logistic Regression\n",
    "\n",
    "by [Alejandro Correa Bahnsen](albahnsen.com/) and [Jesus Solano](https://github.com/jesugome)\n",
    "\n",
    "version 1.5, January 2019\n",
    "\n",
    "## Part of the class [Practical Machine Learning](https://github.com/albahnsen/PracticalMachineLearningClass)\n",
    "\n",
    "\n",
    "\n",
    "This notebook is licensed under a [Creative Commons Attribution-ShareAlike 3.0 Unported License](http://creativecommons.org/licenses/by-sa/3.0/deed.en_US). Special thanks goes to [Rick Muller](http://www.cs.sandia.gov/~rmuller/), Sandia National Laboratories(https://github.com/justmarkham)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Review: Predicting a Continuous Response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ri</th>\n",
       "      <th>na</th>\n",
       "      <th>mg</th>\n",
       "      <th>al</th>\n",
       "      <th>si</th>\n",
       "      <th>k</th>\n",
       "      <th>ca</th>\n",
       "      <th>ba</th>\n",
       "      <th>fe</th>\n",
       "      <th>glass_type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1.51966</td>\n",
       "      <td>14.77</td>\n",
       "      <td>3.75</td>\n",
       "      <td>0.29</td>\n",
       "      <td>72.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>1.51115</td>\n",
       "      <td>17.38</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.34</td>\n",
       "      <td>75.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>1.52320</td>\n",
       "      <td>13.72</td>\n",
       "      <td>3.72</td>\n",
       "      <td>0.51</td>\n",
       "      <td>71.75</td>\n",
       "      <td>0.09</td>\n",
       "      <td>10.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.16</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ri     na    mg    al     si     k     ca   ba    fe  glass_type\n",
       "id                                                                        \n",
       "22   1.51966  14.77  3.75  0.29  72.02  0.03   9.00  0.0  0.00           1\n",
       "185  1.51115  17.38  0.00  0.34  75.41  0.00   6.65  0.0  0.00           6\n",
       "40   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1\n",
       "39   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1\n",
       "51   1.52320  13.72  3.72  0.51  71.75  0.09  10.06  0.0  0.16           1"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# glass identification dataset\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/glass/glass.data'\n",
    "col_names = ['id','ri','na','mg','al','si','k','ca','ba','fe','glass_type']\n",
    "glass = pd.read_csv(url, names=col_names, index_col='id')\n",
    "glass.sort_values('al', inplace=True)\n",
    "glass.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question:** Pretend that we want to predict **ri**, and our only feature is **al**. How could we do it using machine learning?\n",
    "\n",
    "**Answer:** We could frame it as a regression problem, and use a linear regression model with **al** as the only feature and **ri** as the response.\n",
    "\n",
    "**Question:** How would we **visualize** this model?\n",
    "\n",
    "**Answer:** Create a scatter plot with **al** on the x-axis and **ri** on the y-axis, and draw the line of best fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('bmh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4b9b97abe0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot using Pandas\n",
    "glass.plot(kind='scatter', x='al', y='ri')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'ri')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# equivalent scatter plot using Matplotlib\n",
    "plt.scatter(glass.al, glass.ri)\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('ri')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fit a linear regression model\n",
    "from sklearn.linear_model import LinearRegression\n",
    "linreg = LinearRegression()\n",
    "feature_cols = ['al']\n",
    "X = glass[feature_cols]\n",
    "y = glass.ri\n",
    "linreg.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ri</th>\n",
       "      <th>na</th>\n",
       "      <th>mg</th>\n",
       "      <th>al</th>\n",
       "      <th>si</th>\n",
       "      <th>k</th>\n",
       "      <th>ca</th>\n",
       "      <th>ba</th>\n",
       "      <th>fe</th>\n",
       "      <th>glass_type</th>\n",
       "      <th>ri_pred</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1.51966</td>\n",
       "      <td>14.77</td>\n",
       "      <td>3.75</td>\n",
       "      <td>0.29</td>\n",
       "      <td>72.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.521227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>1.51115</td>\n",
       "      <td>17.38</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.34</td>\n",
       "      <td>75.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6</td>\n",
       "      <td>1.521103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>1.52320</td>\n",
       "      <td>13.72</td>\n",
       "      <td>3.72</td>\n",
       "      <td>0.51</td>\n",
       "      <td>71.75</td>\n",
       "      <td>0.09</td>\n",
       "      <td>10.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.16</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520682</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ri     na    mg    al     si     k     ca   ba    fe  glass_type  \\\n",
       "id                                                                           \n",
       "22   1.51966  14.77  3.75  0.29  72.02  0.03   9.00  0.0  0.00           1   \n",
       "185  1.51115  17.38  0.00  0.34  75.41  0.00   6.65  0.0  0.00           6   \n",
       "40   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1   \n",
       "39   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1   \n",
       "51   1.52320  13.72  3.72  0.51  71.75  0.09  10.06  0.0  0.16           1   \n",
       "\n",
       "      ri_pred  \n",
       "id             \n",
       "22   1.521227  \n",
       "185  1.521103  \n",
       "40   1.520781  \n",
       "39   1.520781  \n",
       "51   1.520682  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make predictions for all values of X\n",
    "glass['ri_pred'] = linreg.predict(X)\n",
    "glass.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'ri')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# put the plots together\n",
    "plt.scatter(glass.al, glass.ri)\n",
    "plt.plot(glass.al, glass.ri_pred, color='red')\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('ri')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Refresher: interpreting linear regression coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linear regression equation: $y = \\beta_0 + \\beta_1x$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.51699012])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute prediction for al=2 using the equation\n",
    "linreg.intercept_ + linreg.coef_ * 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.51699012])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute prediction for al=2 using the predict method\n",
    "test = np.array(2)\n",
    "test = test.reshape(-1,1)\n",
    "linreg.predict(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['al'] [-0.00247761]\n"
     ]
    }
   ],
   "source": [
    "# examine coefficient for al\n",
    "print(feature_cols, linreg.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Interpretation:** A 1 unit increase in 'al' is associated with a 0.0025 unit decrease in 'ri'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5145125136125304"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# increasing al by 1 (so that al=3) decreases ri by 0.0025\n",
    "1.51699012 - 0.0024776063874696243"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.51451251])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute prediction for al=3 using the predict method\n",
    "test = np.array(3)\n",
    "test = test.reshape(-1,1)\n",
    "linreg.predict(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting a Categorical Response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    70\n",
       "2    76\n",
       "3    17\n",
       "5    13\n",
       "6     9\n",
       "7    29\n",
       "Name: glass_type, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine glass_type\n",
    "glass.glass_type.value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ri</th>\n",
       "      <th>na</th>\n",
       "      <th>mg</th>\n",
       "      <th>al</th>\n",
       "      <th>si</th>\n",
       "      <th>k</th>\n",
       "      <th>ca</th>\n",
       "      <th>ba</th>\n",
       "      <th>fe</th>\n",
       "      <th>glass_type</th>\n",
       "      <th>ri_pred</th>\n",
       "      <th>household</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1.51966</td>\n",
       "      <td>14.77</td>\n",
       "      <td>3.75</td>\n",
       "      <td>0.29</td>\n",
       "      <td>72.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.521227</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>1.51115</td>\n",
       "      <td>17.38</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.34</td>\n",
       "      <td>75.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6</td>\n",
       "      <td>1.521103</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520781</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520781</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>1.52320</td>\n",
       "      <td>13.72</td>\n",
       "      <td>3.72</td>\n",
       "      <td>0.51</td>\n",
       "      <td>71.75</td>\n",
       "      <td>0.09</td>\n",
       "      <td>10.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.16</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520682</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ri     na    mg    al     si     k     ca   ba    fe  glass_type  \\\n",
       "id                                                                           \n",
       "22   1.51966  14.77  3.75  0.29  72.02  0.03   9.00  0.0  0.00           1   \n",
       "185  1.51115  17.38  0.00  0.34  75.41  0.00   6.65  0.0  0.00           6   \n",
       "40   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1   \n",
       "39   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1   \n",
       "51   1.52320  13.72  3.72  0.51  71.75  0.09  10.06  0.0  0.16           1   \n",
       "\n",
       "      ri_pred  household  \n",
       "id                        \n",
       "22   1.521227          0  \n",
       "185  1.521103          1  \n",
       "40   1.520781          0  \n",
       "39   1.520781          0  \n",
       "51   1.520682          0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# types 1, 2, 3 are window glass\n",
    "# types 5, 6, 7 are household glass\n",
    "glass['household'] = glass.glass_type.map({1:0, 2:0, 3:0, 5:1, 6:1, 7:1})\n",
    "glass.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's change our task, so that we're predicting **household** using **al**. Let's visualize the relationship to figure out how to do this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'household')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(glass.al, glass.household)\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('household')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's draw a **regression line**, like we did before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fit a linear regression model and store the predictions\n",
    "feature_cols = ['al']\n",
    "X = glass[feature_cols]\n",
    "y = glass.household\n",
    "linreg.fit(X, y)\n",
    "glass['household_pred'] = linreg.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'household')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEGCAYAAACQO2mwAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzsvXl8XFXd+P8+s88kM2k2kpaWFtkqigsiylps5LGIys/CAygoS8Gv2JayVFo2LZattVi6qCguFB8ReBSBBxAeHooFaXgEwg5P2SQktEknyWT2fc7vjyyk2TMzN2duet6vV16ZuefOue/zmTv3M+fOufcIKSUajUaj0QyHRbWARqPRaEoXnSQ0Go1GMyI6SWg0Go1mRHSS0Gg0Gs2I6CSh0Wg0mhHRSUKj0Wg0I2JTLVBs/v73v0un06laQ6PRaExFLBbraGhoqB28fMolCafTydy5c1Vr9NPc3Mzs2bNVa+SFdleDdleHmf0LdW9qamoebrk+3WQwdrtdtULeaHc1aHd1mNnfKHedJAymoqJCtULeaHc1aHd1mNnfKHedJAymo6NDtULeaHc1aHd1mNnfKHedJAxGfzNRg3ZXg5ndwdz+uidhUlKplGqFvNHuatDu6jCzv1HuOkkYTDweV62QN9pdDdpdHWb2N8pdJwmDqa+vV62QN9pdDdpdHab0lxL7/fczI502pHqdJAymra1NtULeaHc1aHd1mM1ftLVR9t3vUn7++biWLQMD5gfSScJgHA6HaoW80e5q0O7qMI2/lDjuugvfUUfhePhhZHk50RNPNGRTU+6K61LD6/WqVsgb7a4G7a4OM/hbWlrwXHop9q1bAUh/+ctEf/YzMtOmgRDF317Ra9TsQWdnp2qFvNHuatDu6ihp/1wO529+g++YY7Bv3Upu2jSiv/wlkXvuQc6caZi77kkYTGVlpWqFvNHuatDu6ihVf8s77+BZtgx7YyMAqa9/ndjatci6uv51jHIvmZ6EEOJ3QojdQojXRig/SwjxihDiVSHEdiHEpyfbMR/0kDo1aHc1mNkdStA/k8G5cSO+44/H3thIbp99iNxxB9EtW/ZIELB3DIG9A1gwSvm/gHlSysOA1cCvJ0OqUBKJhGqFvNHuatDu6iglf8sbb+D9ylfwrFqFSCRInnkmocZG0t/4xrDrG+VeMqebpJRPCSHmjFK+fcDTZ4GZRjsVA1OOu+5Fu6tBu6ujJPxTKVzr1+P62c8Q6TS5GTOIrl9PZozRS0a5l1JPYiIsAv6mWmI8mG3c9UC0uxq0uzpU+1tffBHv/Pm416xBpNMkzzuP4PbtYyYIMM69ZHoS40UI8SV6ksSxw5Xv3r2bRYsWYbPZyGazLFy4kMWLF9PW1kZZWRlWq5VQKERtbS1dXV1IKamtraW9vZ3y8nIAIpEIdXV1+P1+hBBUVVXh9/vx+Xxks1mi0Sj19fW0tbVht9upqKigo6ODiooKUqkU8Xi8vzyZTBKJROjs7KSyspJ4PE4ikegvd7lcuN1uAoEA1dXVhMNhUqlUf7nb7cbhcBAMBqmpqSEYDJJOp/vLjWxTNBqlu7t7SJscDgder7ek25ROp2lubh73+1RKbbJarbS0tBS876loUywWI5FIGPZ5MrpN6XSaQCAwqccIh8OBz27HfuON7HPnnYhcjuSsWURvvZUPPvYxXPE4bhizTdFolGg0mve+N+IxVxpwhV6+9J5uekhK+ckRyj8F/BU4SUr51nDrNDY2ylKamS4UCuHz+VRr5IV2V4N2V4cKf1tjI56LL8b67rtIi4XkRRcRv/JK8HgmVE+h7k1NTS80NDQcMXi5aU43CSH2A+4DvjNSgihFAoGAaoW80e5q0O7qmFT/cBj3FVfgPflkrO++S/aQQwg/+ijx1asnnCDAOPeSOd0khPgTcAJQI4RoBX4M2AGklLcBPwKqgV+InqsKM1LKIVmv1KiurlatkDfaXQ3aXR2T5W/buhXPJZdgbW1F2mwkLrmExOWXg9OZd51GuZdMkpBSfmuM8guACyZJp2iEw+Exz/mVKtpdDdpdHUb7i+5u3Ndcg/OuuwDIfPrTxDZtIvvJYc+wTwij3EsmSUxV9CQmatDuajCzOxjrb3/4YTzLl2Npb0c6ncRXrCC5ZAnYinMYNspdJwmDKYlx13mi3dWg3dVhhL/w+/GsWIHj/vsByBx5JNGNG8kdfHBRt6OvkzApqsddF4J2V4N2V0dR/aXE/uc/99zO+/77kR4PsZtuIvzww0VPEKCvkzAtbrdbtULeaHc1aHd1FMtf7NyJ5/LLcTz2GADpefOI3Xorudmzi1L/cBgVe50kDMY0k5gMg3ZXg3ZXR8H+UuK48048P/oRIhwm5/MRX72a1NlnGzLXw0CMir0+3WQwwWBQtULeaHc1aHd1FOJvef99yr/5TcouvRQRDpNasIDQ9u2kvvMdwxMEGBd73ZMwmJqaGtUKeaPd1aDd1ZGXfzaL8/bbcV9/PSIWI1ddTezmm0kvXDgpyaEPo2KvexIGY+ZvVtpdDdpdHRP1t+zYgferX8Vz1VWIWIzUwoU9t/M+9dRJTRCgexKmJZ1Oq1bIG+2uBu2ujnH7p9O4Nm3CtXYtIpUiV19P7JZbSJ90krGCoyoZE3udJAzGzOPGtbsatLs6xuNvffVVPEuXYnvlFQCSZ51F/PrrkRUVRuuNir5OwqSYedy4dleDdlfHqP7JJK4bbsDb0IDtlVfIzppF+C9/IbZpk/IEAfo6CdNSVlamWiFvtLsatLs6RvK3PvccZUuXYn3rLaQQJL73PeLXXAMldJ8qo2Kvk4TBWK1W1Qp5o93VoN3VMcQ/GsV9ww04f/UrhJRkDzyQ6MaNZL/4RTWCo2BU7PXpJoMJhUKqFfJGu6tBu6tjoL/t6afxHXccrttuA4uFxLJlhLZtK8kEAcbFXvckDKa2tla1Qt5odzVod3XU1tZCKITnxz/GuWULAJlPfKLndt6f+Yxiu9ExKva6J2EwXV1dqhXyRrurQburI33//VQcdRTOLVuQdjvxK68k/MQTJZ8gwLjYl0ySEEL8TgixWwjx2gjlQgixUQjxjhDiFSHE4ZPtmA+lNIf4RNHuatDuk4/o6sLz//4fc5YswbJrF5nDDyf05JMkfvhDMMn9qIyKfSmdbroD2AzcOUL5ScBBvX9fAH7Z+98wdoWSbHlhF52xNNUeO+d8bjrTfRObXnBgF7AY9U0mhXZfX94ZZt1THxBJZih32jjviHr+2RIetv3jic1447crlOTP7yTZ+crbeGwWENDSHWdnOE1OgkXATJ+TfX1OEBBL5/DYLCQyWf4VSAKSj+9Txve/OHOP+vu2vzOUIBDPUmYXBBNZEpksibREAhaLwGO3cECVC2DE+ga2xWOzEEyk2OFPkAOm2XNg66au3MEMn5OTDqnmbzs62RlK4I+kSeckFsGodfbFB9hjOwgIxNME4lkq3TZm+Jz9cRz8+r7tjvR8cPyHi3ssnRtzXx8c17G8BrdrJJdxfdakxP7AA3hWrMDi95N2OPnPb17I3cedRsXbVma0v1/yn9O+tsbiCTzvFN9XlFLmF0LMAR6SUg6Zy08I8Svg71LKP/U+3wGcIKXcNXC9xsZGOXfu3IJddoWSrPzbO+wKfzTb03Svg5tPOnBCb0BzczOzZ88uWn2TSZ97Pry8M8zKv71DdpTdq6/9wJixGW/8+tY72BlhW0dh3wD3KbPz05MP6j9QDd5+vvXB0PYOZF5Nag93q2DEOI5WZ63HhhCC3dHRr8Sd7nVw2XH78bOnP9jj9YO3O/j5wPiPFfeR9vXR4jqS13DtGs5lrH1FtLXhueIKHA89BMCrB32Gh85fyn3WOeNyLwUGtrVvv8nXt6mp6YWGhoYjBi8vmdNN42BfoGXA89beZYaw5YVdQ3bcXeEUW17YNcIrhqdvztli1TeZFDJf7rqnPhg1QcBH7R9PbMYbv771diUK37V3R9P99Q+3/XzrG6uuwe6jxXG0Ov2xzJgJAnriuO6pD4a8fvB2Bz8fGP+x4j7Svj5aLEbyGq5dw7mMuH0pcdx1V89kQA89hCwv577vXcWiRT/ltYqZ43YvBQa2tS/2xfYtpdNNRWH37t0sWrQIm81GNptl4cKFLF68mLa2NsrKyrBarYRCIWpra+nq6kJKSW1tLe3t7f0HxUgkQiye4NjqFBkpeDti5ZO+DK1xC45UmObmZurr62lra8Nut1NRUUFHRwcVFRWkUini8Xh/eTqdxul0UpMNMNOdpdqRY5pd8kK3jc9Ny+BJhwiFQgQCAaqrqwmHw6RSqf7Xu91uHA4HwWCQmpoagsEg6XS6v3wibaqrq8Pv9yOEoKqqCr/fj8/nI5vNEo1Gh7TJ7/djtVqHtMnhcOD1euns7KSyspJ4PE4ikegvd7lc+EgytybNW2Er0905vLaP2tyZshDOCOZ4sqQSMWpsaebVpPrL25MW0jmoyQaIxfahq6uLqmw3FfYcn6nI9H8YprtyxOIJWlpa+ttUkw1wQFmGme4s0125/jpjWUFzzMrHvRnej1nx2iTVjo/KwxnBrriFg71Z3o1a+9+naDxBc3MznnSIme4sB5Rlx2zTm2Ebsz1ZPFY5bJs+TLv4YlUam5C8GrINaVMoLYbd9+wWqHMObVNNNkBHxsEnfZlxtamvvDst6ExZOKAsywdxyeHTMhNukyUVobm5mWQizher0tQ7s7QnLUPa9FLQRlW2m9bW1j32PUcqvMd7P/h9qrHHmVuTHVebarIB2tvd5JJR5tWkhrxPNdkAXS91M33VKjxPPQVA+Nhj+eCqq9jaNY3jU0GsQpKVMNOd47WQjYPKs9iEJNa7HxTyeRrpGDGez5Pb7R72GFGTDfBJX09cPunL0J22MNuTpSYbIJmcPqFjxEiYKUl8CMwa8Hxm77I92GeffXjmmWeGvHjgaZPKykoAPB7PsOXV1dV43nufrTvj/cv6utCz67396w58zXBXO86ePbt/x+qwVtIaD9Aa/+iCl20dDuYf4MPn6/mDPb+9D6x/2rRpQ7Yz0TYBzJo1a9jyvtsMD1zmdrv7tzvca/pc+9wHlofo4O2Onrtg7kru2eY+mmNW5h/gIQRs68gNKZ9dX4nH48Hj8dD1doZgOrBH+VsRmH+Aa482dVgreTcaYKY717/uwNfsTg49FTKwvM+1732af4CL2bNnE3vv/T3ev9Ha1LMdy7Dls+srcVph64eJYcvfigw93TTw8f+Fhy7rsFaCFV4LpYZ9zeA2DS5vjVupK3fwr24xbPlobZqxTzmzZ8/G+d77bP0wwbwaSTBtGdImgC7rNGbO7Pmm3refpBxBtrVkhmyz731KWBy0B1LjalOHtZK6ujoszjhbW1N7rCdyOQ58/HE+9qfNiEiE3LRpxG+8kcwZZzBDCMqe7Pm8z6tJ8W7UxrvRnjo7u3ra3Lcf9JHP52mkY0Qfo32eBi4feIzosFbyWigAwBxPlt1JC7uTFrxVlTidzgkdI5qbm4f4gblONz0IfLd3lNMXgeDg3yOKyTmfm850754HlOleR/+PZuOlrq6uqPVNJn3u+bD8+P2wjnGn5L72jyc2441f33ovBQv//rNP2Uc/kg63/XzrG6uuwe6jxXG0Oms9NvYps4/pNd3rYPnx+w15/eDtDn4+MP5jxX2kfX20WIzkNVy7hnPpY5a/ld/9djnfvP1mRCRC6utfJ9TYSOrMM/tv5z2afyl/Tge2tc+92L4l88O1EOJPwAlADdAO/BiwA0gpbxNCCHpGPy0AYsB5UsrnB9dTrB+uoTijkVpaWvq/bZhtdNNA93xQObrpiRd38HLEPfLopgon+3oLG91Ubhd0GzC66djqFK/FPNSXO5hu4OimKreN6UUe3TQ47vmMbhrLa7yjm/7wzxY+e98f+OZ9v8aeSpKrrSW2di3pU04Z0eOJF3fwz27HsB6lSl98qrLddFmn5e070g/XJZMkikUxk0QxaG1t7e9imw3trgbtXjiWN96g7OKLsTU1AZA84wziN9yArKoa9XWl4p8PhbqPlCTM9JuEKakaY6csZbS7GrR7AaRSuNavx/WznyHSaXIzZhBdv57MiSeO6+XK/QvAKHcz/SZhSvx+v2qFvNHuatDu+WF98UW88+fjXrMGkU6TPO88gtu3jztBgI79cOiehMEMHKlgNrS7GrT7BInHca9Zg3PzZkQuR3b//Ylt2EDm2GMnXJWO/VB0kjCYbDarWiFvtLsatPv4sTU24rn4Yqzvvou0WEj84AfEr7oKBgzznAg69kPRp5sMJhqNqlbIG+2uBu0+DsJh3Fdcgffkk7G++y7ZQw4h/OijxK+/Pu8EATr2w6F7EgZj5onhtbsatPvo2LZuxXPJJVhbW5E2G4lly0gsXw7Owoep6tgPRfckDMbME8NrdzVo9+ER3d14lizBe9ppWFtbyXz604S3biVx9dVFSRCgYz8cuidhMHb72Fe8liraXQ3afZh6H34Yz/LlWNrbkU4n8RUrSC5ZArbiHsJ07Ieik4TBVFRUqFbIG+2uBu3+EcLvx7NiBY777wcgc+SRRDduJHfwwUXdTh869kPRp5sMpqOjQ7VC3mh3NWh3eiYD+vOfe27nff/9SI+H2E03EX74YcMSBOjYD4fuSRiM/maiBu2uhmK4i5078Vx+OY7HHgMgPW8esVtvJZfnBFgTYW+P/XDoJGEwqVRhE9WoRLurYa91lxLHnXfi+dGPEOEwOZ+P+OrVpM4+u/9urUaz18Z+FHSSMJh4PD72SiWKdlfD3uhuef99PJdcgr13MqDUggXE1q1DzphRTL0x2RtjPxY6SRiMHnetBu2uhgm7Z7M4b78d9/XXI2IxctXVxG6+mfTChZPWexjIXhX7caJ/uDYYPe5aDdpdDRNxt+zYgferX8Vz1VWIWIzUwoWEGhtJn3qqkgQBe0/sJ4LuSRiMw1HYbGYq0e5qmPLu6TSuTZtwrV2LSKXI1dcTu+UW0iedZLzgGEz52OdByfQkhBALhBA7hBDvCCFWDlO+nxDiSSHEi0KIV4QQX1XhOVG8Xq9qhbzR7mqYyu7WV1/Fe+KJPaeXUimSZ53V03sogQQBUzv2+VISSUIIYQV+DpwEHAp8Swhx6KDVrgHulVJ+FjgT+MXkWuZHZ2enaoW80e5qmJLuySSuG27A29CA7ZVXyM6aRfgvfyG2aROyhIadTsnYF0ipnG46EnhHSvkegBDibuAU4I0B60ig74bpFcDOSTXMk8rKStUKeaPd1TDV3K3PPUfZ0qVY33oLKQSJ732P+DXXQHm5AsPRmWqxLwalkiT2BVoGPG8FvjBonVXAfwshlgJlwJeHq2j37t0sWrQIm81GNptl4cKFLF68mLa2NsrKyrBarYRCIWpra+nq6kJKSW1tLe3t7ZT37rSRSIS6ujr8fj9CCKqqqvD7/fh8PrLZLNFolPr6etra2rDb7VRUVNDR0UFFRQWpVIp4PN5fnkwmsVgsdHZ2UllZSTweJ5FI9Je7XC7cbjeBQIDq6mrC4TCpVKq/3O1243A4CAaD1NTUEAwGSafT/eVGtqm1tZUZM2YMaZPD4cDr9ZZ0mzo7OwkEAuN+n0qpTVarlWAwWPC+p6JN4XAYh8NBe3s7XouF6vXr8W7ZgpCS5OzZtF53Ha4vf7mnTel0ybUp3es0mceIYrVp586dzJ49O+99bySElHL8h3KDEEKcBiyQUl7Q+/w7wBeklEsGrHMZPb63CCGOAn4LfFJKmRtYV2Njo5w7d+4k2o9Oc3MzsyfhSlEj0O5qmArutqefxrNsGdb330darSSXLCF+xRXgdqtWHJWpEPt8aWpqeqGhoeGIwctLpSfxITBrwPOZvcsGsghYACClbBRCuIAaYPekGOaJHnetBu2uhukeD55LL8W5ZQsAmU98gtimTWQ/8xnFZuPDzLGf6tdJPAccJITYXwjhoOeH6QcHrfMB0AAghPg44AJKftZyPe5aDdp98rH9939TedxxOLdsQdrtxK+8kvATT5gmQYB5Yw9T/DoJKWVGCLEEeAywAr+TUr4uhPgJ8LyU8kHgcuB2IcSl9PyIfa4shXNlY+ByuVQr5I12V4PZ3EVXF+4rr8T5n/8JQObww3tu533o4AGKpY/ZYj8Qo9xLIkkASCkfAR4ZtOxHAx6/ARwz2V6F4i7xc7Cjod3VYBp3KbE/8ACeFSuw+P1Il4vA5ZcjLrkErFbVdnlhmtgPg1HupXK6acoSCARUK+SNdleDGdxFWxtl55xD+fnnY/H7SR9zDKF//IMPTjvNtAkCzBH7kTDKvWR6ElOV6upq1Qp5o93VUNLuUuL4059wX301lmAQWV5O7LrrSJ1zDlgsVEciqg0LoqRjPwZGueuehMGEw2HVCnmj3dVQqu6itZXyf/93ypYswRIMkm5oILh9O6nzzgNLz6GkVN3Hi5n9jXLXPQmD0ZOYqEG7F5FcDufvf4/7uusQkQi5adOI33gjqTPOGHK31pJznyBm9teTDpkUPe5aDdq9OFjefRfPsmXYt28HIPX1rxNbuxZZVzfs+qXkng9m9p/q10lMWfS4azVo9wLJZHBu2oTvuOOwb99OrraWyO9/T3TLlhETBJSIewGY2X9KXycxldFD6tSg3fPH8sYblF18MbamJgCSZ5xB/IYbkFVVY75WtXuhmNnfKHedJAxGT2KiBu2eB6kUrltvxXXLLYh0mtyMGUTXrydz4onjrsLMcQdz+yuZdEgIYRnPnyFmU4RgMKhaIW+0uxpUuFtffBHv/Pm4b74ZkU6TPO88gtu3TyhBgLnjDub2N8p9rJ5Ehp5bYIyFea+eMZiamhrVCnmj3dUwqe7xOO41a3Bu3ozI5cjuvz+xDRvIHHtsXtWZOe5gbn+j3MfqBewPfKz3bymwjZ47sX689/+TwJIRX63R30wUod3Hxvrss/jmzcO1cSMAiR/8gNDTT+edIMDccQdz+yvpSUgpm/se987ncISUsrt30VtCiOeB54FfGmI3BUin06oV8ka7q8Fw90gE9+rVOH/zG4SUZA85hOimTWSPGDKVwIQxc9zB3P5GuU/kh+sKwAN0D1jm6V2uGQE97loN2n14bE8+ieeSS7C2tCBtNuLLlpFYvhyczqLUb+a4g7n9S+E6iS3A/wghvieEOEkI8T16bu29xRCzKYIed60G7b4norsbz5IleE89FWtLC5lPf5rw1q0krr66aAkCzB13MLd/KVwncQXwDnAGMAPYBWwGbjfAa8pQVlamWiFvtLsaiu1uf+QRPMuXY2lrQzqdxFesILlkCdiKPwLezHEHc/sb5T7uvaR3Lunbev+KjhBiAbCBnpFSv5FS3jzMOqcDq+gZcfWylPLbRrgUE6uJb5us3dVQLHfR0YFnxQocf/0rAJkjj+yZDOjgg4tS/3CYOe5gbn+j3EdNEkKI88dTiZTyd4VICCGswM+BE4FW4DkhxIO9Ew31rXMQcCVwjJQyIITYp5BtThahUIjKykrVGnmh3dVQsLuU2P/yFzwrV2Lp6kJ6PMSvvZbkBRcYPteDmeMO5vY3yn2snsR3xlGHBApKEsCRwDtSyvcAhBB3A6cAbwxY50Lg51LKAICUcneB25wUamtrVSvkjXZXQyHuYudOPJdfjuOxxwBIz5tHbP16cnPmFMludMwcdzC3v1HuYw2B/ZIhWx3KvkDLgOetwBcGrXMwgBDiGXpOSa2SUj46OXr509XVhcfjUa2RF9pdDXm5S4njD3/Ac+21iHAY6fUSW72a1He+M+R23kZi5riDuf2Ncp/QL1dCiErg6/Qc1D8E/qvvm/0kYAMOAk4AZgJPCSEOG3DdBgC7d+9m0aJF2Gw2stksCxcuZPHixbS1tVFWVobVaiUUClFbW0tXVxdSSmpra2lvb6e8vByASCRCXV0dfr8fIQRVVVX4/X58Ph/ZbJZoNEp9fT1tbW3Y7XYqKiro6OigoqKCVCpFPB7vL49Go0QiETo7O6msrCQej5NIJPrLXS4XbrebQCBAdXU14XCYVCrVX+52u3E4HASDQWpqaggGg6TT6f5yI9sUCAQoLy8f0iaHw4HX6y3pNkUiEZqbm8f9PpVSm3K5HC0tLeN+n0Ivv8z+N96Iu/d23ol/+zfevfxyxMyZeKPRSW1Td3c3NTU1hn2ejH6f4vE4gUBgUo8RxWpTIBCgsrIy731vJISU47nrBgghjgIeBv4PaAb2o+fK65OllI3jqmT0uldJKb/S+/xKACnlTQPWuQ34Xynl73ufPwGslFI+N7CuxsZGOXfu3EJ0ikoikcDlcqnWyAvtroZxu2ezOG+/Hff11yNiMXJVVcTWrCG9cOGk9h4GYua4g7n9C3Vvamp6oaGhYcgVlRO5TuJW4AdSyqOllN+SUh4DXARszNvqI54DDhJC7C+EcABnAg8OWud+enoRCCFq6Dn99F4Rtm0o7e3tqhXyRrurYTzulrfewnvyyXiuugoRi5H65jcJNTaSPvVUZQkCzB13MLe/Ue4TSRIHA/cOWvZn4MBCJaSUGXruAfUY8CZwr5TydSHET4QQ3+hd7TGgUwjxBj33jPqhlLKz0G0bzVhduVJGu6thVPd0Gtf69fjmzcP2z3+Sq68n8h//QfS3v0WWwI+uZo47mNvfKPeJ/CbxNj3f8O8asOzfgXeLISKlfAR4ZNCyHw14LIHLev80mr0O66uv4lm6FNsrrwCQPOss4qtXI6dNU2ymmcpMpCdxCbBZCPGsEOIeIcT/Ar8ALjZGbWoQiURUK+SNdlfDEPdkEtcNN+BtaMD2yitkZ80i/Oc/E9u0qeQShJnjDub2N8p9IldcbxdCHACcTM9tOf4LeERK2WWI2RShbpT5gEsd7a6Gge7W556j7OKLse7YAUDiwguJX3stlOhpETPHHcztb5T7hGaVk1IGpJT/IaVc2/tfJ4gx8Pv9qhXyRrurwe/3QyyG++qr8S5YgHXHDrIHHkjokUeIr1lTsgkCzB13MLe/Ue7j7kkIIfYHbgA+A+yxl0op9yuy15RBKBxpUijaXQ3lzz2H7/rrsb7/PtJiIXHxxcSvuAIMmui+mJg57mBuf6PcJ/LD9V30/Eh9ORAzxGYKUlVVpVohb7T7JBMK4Vm1iso77gBREOB6AAAgAElEQVQgc+ihxDZtIvvZz6r1mgCmjPsAzOxvlPtETjd9AviulPJvUsptA/8MMZsi6O6rGszmbnv8cSqOPhrnHXeQs9mIr1xJeOtWUyUIMF/cB2Nmf+Wnm4CngM8CLxhiMkXx+XyqFfJGuxuP6OrCfdVVOO/tuQQpc/jh7Lr+esq/+EXFZvlhlriPhJn9jXIf61bhPxnw9H3gUSHEX4E9pkAaeD2DZk+y2axqhbzR7sZif+ABPFdcgcXvR7pcxK+8kuRFF5Ho7qZ0f5oeHTPEfTTM7G+U+1inm2YN+CsDHgLsg5bPMsRsihCNRlUr5I12NwbR3k7Zd79L+XnnYfH7SR99NKGnnya5dCnYbCXtPhZmdgdz+xvlPtatws8zZKt7EXpidTWUpLuUOO6+G/fVV2Pp7kaWlxNbtYrUueeC5aPvayXpPk7M7A7m9jfKfULXSQgh5gohrhVCbO59fogQ4lOGmE0R9MTqaig1d9HaSvnpp1O2eDGW7m7SDQ0Et28ndf75eyQIKD33iWBmdzC3v1Hu404SQoh/B56mZy6J7/Yu9gI/M8BrymC321Ur5I12LwK5HI7f/Y6Ko4/G/sQT5KZNI/rznxO5917kzJnDvqRk3PPAzO5gbn+j3CcyuuknwJellC8LIc7oXfYy8Onia00dKioqVCvkjXYvDMu77+JZtgx772RAqa99jdhPf4oc4/YJpeCeL2Z2B3P7G+U+kdNN+wCv9D6WA/6Pb9aivZSOjg7VCnmj3fMkm8W5aRO+447Dvn07udpaIr//PdE77xwzQYCOu0rM7G+U+0R6Ei8A3wHuHLDsTOCfRTWaYuhvJmpQ5W554w3KLr4YW1MTAMnTTyd+443ICVwNq+OuDjP7G+U+kSRxMfDfQohFQJkQ4jF6JiL6N0PMpgipVEq1Qt5o9wltENett+K65RZEOk1uxgyi69eTOfHEPKrScVeFmf2Nch/36SYp5f8Bc4GfA9cAvwcOk1K+XQwRIcQCIcQOIcQ7QoiVo6x3qhBCCiGGzMVaisTjcdUKeaPdx4f1xRfxzp+P++abEek0yXPPJbh9e14JAnTcVWJmf6PcJ9KTQEoZo3cKUyHEx4AaoOCZLoQQVnqSz4lAK/CcEOJBKeUbg9bzAsuA/y10m5OFHnethklxj8dxr1mDc/NmRC5Hds4cYhs2kDnuuIKq1XFXh5n9lV8nIYT4kxDi6N7H5wGvA6/3nn4qlCOBd6SU70kpU8DdwCnDrLcaWAMkirDNSUGPu1aD0e7WZ5/FN28ero0bQUoSF11E6OmnC04QoOOuEjP7G+U+kZ5EA3BO7+PLgC8D3cD9wG8L9NgXaBnwvBX4wsAVhBCHA7OklA8LIX44UkW7d+9m0aJF2Gw2stksCxcuZPHixbS1tVFWVobVaiUUClFbW0tXVxdSSmpra2lvb++fSDwSiVBXV4ff70cIQVVVFX6/H5/PRzabJRqNUl9fT1tbG3a7nYqKCjo6OqioqCCVShGPx/vL4/E4kUiEzs5OKisricfjJBKJ/nKXy4Xb7SYQCFBdXU04HCaVSvWXu91uHA4HwWCQmpoagsEg6XS6v9zINkUiEbq7u4e0yeFw4PV6S7pNqVSK5ubmcb9P421T8MMP2f/22ynfsgUhJZmDDuK9a65BfuELONJpgs3NBbdJCEFLS0vB+56K9ykajZJIJAz7PBndplQqRSAQmNRjRLHaFIlEiEajee97IyGkHN8IViFEt5RymhBiX+CfUsp9e5eHpJQF3X5QCHEasEBKeUHv8+8AX5BSLul9bgG2AudKKd8XQvwdWC6lfH5wXY2NjXLu3LmF6BSVSCQy5ptQqmj3PbE9+SSeSy7B2tKCtNlILFtGYvlycDqLuh0dd3WY2b9Q96amphcaGhqG/NY7keskXhJCXAlcCzwM0JswQnlbfcSH7HmjwJm9y/rwAp8E/i6EeB/4IvCgGX687uzsVK2QN9q9B9HdjWfJErynnoq1pYXMpz5F+IknSFx9ddETBOi4q8TM/ka5TyRJLAIOA9z0jG4COAr4YxE8ngMOEkLsL4Rw0HP9xYN9hVLKoJSyRko5R0o5B3gW+MZwPYlSo7KyUrVC3mh3sD/yCL6jj8Z5111Ip5P4tdcSfvxxsocdVpT6h0PHXR1m9jfKfSJDYN+VUn5bSnmOlHJ377I/SylXFCohpcwAS4DHgDeBe6WUrwshfiKE+Eah9atED6lTQ6HuoqODskWLKD/7bCxtbWSOPJLQtm0kLr0UDL6/z94cd9WY2V/5EFghxPkjlUkpf1eoiJTyEeCRQcuGncxISnlCodubLBIJ0wzEGsJe6S4l9r/8Bc/KlVi6upAeD/FrryV5wQVgtRZXcgT2yriXCGb2N8p9IqObvjPoeT1wAPAMUHCSmKrocddqyMdd7NyJ5/LLcTz2GADpefOIrV9Pbs6cItuNzt4W91LCzP7Kr5OQUn5p0N/Hge8DJf+7gEr0uGs1TMhdShx33knFUUfheOwxpNdL9NZbidx336QnCNiL4l6CmNm/FK6TGI47gA5gxOsW9nZcLpdqhbzZG9wtzc14LrkE+7ZtAKQWLCC2bh1yxgwj9UZlb4h7qWJmf6PcJ/KbxOBehwc4m54L6jQj4Ha7VSvkzZR2z2Zx3n477uuvR8Ri5KqqiK1ZQ3rhQhBiciRHYErHvcQxs79R7hMZApsB0gP+gsBVwEUGeE0ZAoGAaoW8marulrfewnvyyXiuugoRi5H65jcJNTaSPvVU5QkCpm7czYCZ/Y1yn8jppv0HPY9KKc07Q8ckUV1drVohb6acezqNa/NmXGvXIpJJcvX1xNatI/3Vr06+4ChMubibCDP7G+U+kR+um6WUzfTMRDeDnovqNGMQDodVK+TNVHK3vvoq3hNPxL16NSKZJHnWWYS2by+5BAFTK+5mw8z+RrlP5DeJ6fTcnfUooBOoFkI8C5wppdxpiN0UQE9iooZ+92QS17p1uDZsQGQyZGfNIrZ+PZn589UKjsKUiLtJMbO/8kmHgF8CLwOVUsrpQCXwInCbEWJTBT3uWg319fVYn3sO3wkn4L7lFkQmQ+LCCwk980xJJwgwf9zNjJn9lV8nARwLXC6ljAL0/r8CONoIsamCHnetgFgMy/LleBcswLpjB9kDDyT0yCPE16wBE9zh07Rxx9zuYG5/o9wnkiQCwKGDlh2CHgI7KnpI3eRie/ppfMceyz5//CMIQWLZMkLbtpH94hdVq40bM8a9DzO7g7n9jXKfyOimtcD/CCF+CzQDc4Bz6bl1uGYEHA6HaoW8MZV7KIRn1Sqcd9wBQOqQQ0j84hdkP/tZtV55YKq4D8LM7mBuf6PcJzK66XbgdHrmtf4aUAV8S0r5a0PMpgjBYFC1Qt6Yxd32+ONUHH00zjvuQNrtxFeu5M0//MGUCQLME/fhMLM7mNvfKPeJjG5yAAfRcyFdF+AEzhVCnCul/K4hdlOAmpoa1Qp5U+ruoqsL91VX4bz3XgAyhx9OdONGcoceSnU0qtguf0o97qNhZncwt79R7hP5TWILcAk9M9G9A7w74E8zAvqbiTHYH3gA31FH4bz3XqTLRey66wg/+ii5Q3t+Nitl97HQ7uows7/yngSwANhfSmnID9VCiAXABsAK/EZKefOg8suAC+i5PYgfOL/34r6SJp1Oq1bIm1J0F+3teH74QxwPPQRA+uijiW3YQO6AA/ZYrxTdx4t2V4eZ/Y1yn0hP4gN6TjEVHSGEFfg5cBI9I6i+JYQYPJLqReAIKeWngD/T80N6yaPHXRcJKXH86U/4jjoKx0MPIcvLia5bR+TBB4ckCCgx9wmi3dVhZn8l10kIIeb3/QF3Ag8IIb41cHlvWaEcCbwjpXxPSpmi58ruUwauIKV8UkoZ6336LDCzCNs1HD3uunBEayvlp59O2eLFWLq7STc0ENy+ndT554Nl+F24VNzzQburw8z+quaT+O0wy24c9FwCHyvQY1+gZcDzVuALo6y/CPhbgducFMrKylQr5I1y91wOxx134Fm1ChGJkJs2jfgNN5A688wx79aq3L0AtLs6zOxvlPuoSUJKOfjOr8oRQpwNHAHMG6589+7dLFq0CJvNRjabZeHChSxevJi2tjbKysqwWq2EQiFqa2vp6upCSkltbS3t7e2U916NG4lEqKurw+/3I4SgqqoKv9+Pz+cjm80SjUapr6+nra0Nu91ORUUFHR0dVFRUkEqliMfj/eWZTAaXy0VnZyeVlZXE43ESiUR/ucvlwu12EwgEqK6uJhwOk0ql+svdbjcOh4NgMEhNTQ3BYJB0Ot1fbmSbOjs7sdlsQ9rkcDjwer2Gtsn5wQdUXXEFZU1NAAQbGkjccgu7pKS8q2vMNkWj0Qm9T5PRpvG+Ty6Xi5aWloL3PRVtisVilJeXG/Z5MrpNwKQfI4rVps7OTtxud9773ojHXCllAYfs4iCEOApYJaX8Su/zKwGklDcNWu/LwCZgnpRy93B1NTY2yrlz5xpsPH6am5uZPXu2ao28UOKezeL8xS9w33QTIpEgV1tLbO1a0qecMvZrB6DjrgYzu4O5/Qt1b2pqeqGhoeGIwcsLnb60WDwHHCSE2B/4EDgT+PbAFYQQnwV+BSwYKUGUIrW1taoV8may3S1vvknZ0qXYensPydNPJ37jjciqqgnXpeOuBjO7g7n9jXKfyOgmw5BSZoAlwGPAm8C9UsrXhRA/EUJ8o3e1nwLlwH8KIV4SQjyoSHdCdPWeGjEjk+aeSuFauxbfCSdga2oiN2MG4XvuIXbbbXklCNBxV4WZ3cHc/ka5l0pPAinlI8Ajg5b9aMDjL0+6VBEohdN5+TIZ7taXXsKzdCm2118HIHnuucRWrQKfr6B6ddzVYGZ3MLe/Ue4lkySmKrr7OgLxOO61a3Fu3ozIZsnOmUNswwYyxx1XlOp13NVgZncwt/+UPt00lWlvb1etkDdGuVuffRbfvHm4NmyAXI7ERRcRevrpoiUI0HFXhZndwdz+RrnrnoTBjDW8rJQpunskgnv1apy/+Q1CSrIHH0x00yayn/98cbeDjrsqzOwO5vY3yl0nCc2kYHvySTyXXor1gw+QNhvxZctILF8OTkPu9KLRaIqEPt1kMJFIRLVC3hTDXQSDeJYuxXvqqVg/+IDMpz5F+IknSFx9taEJYm+PuyrM7A7m9jfKXfckDKaurk61Qt4U6m5/5BE8y5djaWtDOhwkVqwgsWQJ2O1FMhyZvTnuKjGzO5jb3yh33ZMwGL/fr1ohb/J1Fx0dlF1wAeVnn42lrY3M5z9PaNs2EpdeOikJAvbOuJcCZnYHc/sb5a57EgYjxrgRXSkzYXcpsd93H56VK7F0diI9HuLXXEPywgvBajVGcgT2qriXEGZ2B3P7G+Wuk4TBVOV5xXApMBF3sXMnnuXLcTz6KADp448nduut5ObMMchudPaWuJcaZnYHc/sb5a5PNxnMlO++SonjzjvxHX00jkcfRXq9RG+9lchf/6osQcBeEPcSxczuYG5/fbrJpPgKvL2ESsZytzQ347nkEuzbtgGQ+spXiK1bh9x338nQG5WpHPdSxszuYG5/o9x1kjCYbDarWiFvRnTP5XDefjvu1asRsRi5qipiN99M+tRTx5wMaLKYknE3AWZ2B3P7G+WuTzcZTDQaVa2QN8O5W956C+9Xv4rnyisRsRipb36TUGMj6dNOK5kEAVMv7mbBzO5gbn+j3HVPwmCmzMTqmQzOzZtxr1mDSCbJ1dURW7eO9MknqxMchSkTd5NhZncwt79R7ronYTBTYWJ162uv4T3xRDw/+QkimST57W/39B5KNEHA1Ii7GTGzO5jb3yh33ZMwGPskXTxmBA4pcd1wA64NGxCZDNlZs4itX09m/nzVamNi5rhrd3WY2d8o95LpSQghFgghdggh3hFCrBym3CmEuKe3/H+FEHMm33LiVFRUqFbIC+vzz3PQmWfivuUWRCZD4oILCP3jH6ZIEGDeuIN2V4mZ/Y1yL4mehBDCCvwcOBFoBZ4TQjwopXxjwGqLgICU8kAhxJnAGuCMYjnsCiXZ8sIuOmNpqj12zvncdKb7JnYDupd3hln31AdEkhnKnTbOO6Ketg9beTHiodpj56RDqvnbjk52hhIE4lkq3TZm+Jx7bGtXKMltja281h4hkZG47RY+UVfGwk/uw32v7uZNf4xUJkNWCpASCVgtkMkJ3HYLB1S5SGayvN2ZJCcllW4bpx1Wy3++4qcrnmHg3FVOq+DS42Yx/8DqjxbGYkSuXsWMO3+HVeb4cJ+Z7P7pepzzjuW27a281v4esVQOCeQKjvrEsQLCApkxNj6vJsW2DseI5QLw2CGa3nPZAVVOasudBOJpAvEsdoukI5btXd/CfpUu4uksgXiWMrsgmpb9/we/n33v5Zv+GNlcFqfNSk2ZY8h7PpiOjg7KysqGLO/bR/v2n5G2q5KR3M2Cmf2NchelMF2fEOIoYJWU8iu9z68EkFLeNGCdx3rXaRRC2IA2oFYOakBjY6OcO3fuhLa/K5Rk5d/eYVc41b9sutfBzScdOO4P3cs7w6z82ztkB4VztidLc6znlhRWwZDygdsCWP7QW/hjmQn5F8rKE/Zj/oHV2P7xD2yLl+JuaSYrLPxXw2ms+9K5pOxOvE4LoaSKtJAfA+M+2Uz3OrjsuP1Y+/f3R3wvR9u/uru7mTZt2h7LhttHJ1LnZDGcu5kws3+h7k1NTS80NDQcMXh5qZxu2hdoGfC8tXfZsOtIKTNAEKimCGx5YdeQD9+ucIotL+wadx3rnvpg2ATgtX20cLjygdva8sKuSU8QAL/+nx14LrsM7ze+gbulmbfr9+e8JZt54LRFJO1OJJgqQcCecZ9sdoVTrHvqg1Hfy9H2r1RqaCIYbh+dSJ2TxXDuZsLM/ka5l8TppmKye/duFi1ahM1mI5vNsnDhQhYvXkxbWxtlZWVYrVZCoRC1tbV0dXUhpSQWTzCvJsWuRE/OnO7K8VLQRlW2m9bWVqqqqvD7/fh8PrLZLNFolPr6etra2rDb7VRUVHCYJ4orZ8Frk1Q7crzQbeNz0zJMd2XpTAoO9mZ5N2ql2pFjml32l3enBZ0pCzXZAG1pJ4dPS+O1fVTembIQzgjmeLK8GbYx25PFY/2ovD1pIZ2Dme4cr4VsHFSexSYkr4ZsfKYiM6RNh/kyZKTg7YiVT/oy1Dz3PBfevQFnoANpt/PEyWfwwFfOoDPlYsG0JOGMGNKmcEawK24Zs00HlGV5K2xlujs3qW1qjVs4pDyzh3MsK2iOWfm4N8P7MavhbTrIGWOuKzdqm6qy3SQSCdrb2/tnFYtEImQyGZLJJEKI/n3Pkoow15uhzjl6m2qyAZLJ6bS1teFwOPB6vXR2dlJZWUk8HieRSPTvuy6XC7fbTSAQoLq6mnA4TCqV6i93u904HA6CwSA1NTUEg0HS6XR/+XCfp0AggM/nG9Kmuro6/H7/Hm0a7fPU0dFBRUUFqVSKeDzeX250m2KxGHa7fcgxora2tuTb1PeejOd9Gq5NI6FPNwE3P/k+W98NDFk+/4BKVn5pzrjq+M7dr9MeGZrJy205IpmxO2zzD6gEGNbDCCqiQS79r19yctPjAGQOP5zoxo2c9Yrsb8d43UsR1e515Y5h94eBjLR/JZNJnIMmZBppHx1vnZPFcO5mwsz+hbqX+umm54CDhBD7CyEcwJnAg4PWeRA4p/fxacDWwQkiX8753HSme/f8kXO618E5n5s+7jqWH78f1mEuOP7ctI9OOQxXPnBb53xuOrUe4zt381/Zxj23nM/JTY+TsDl45eIVhB99lNyhh+7Rjj53AficpbKrjI+BcZ9spnsdLD9+v1Hfy9H2r+HGuw+3j06kzsnCzNcZgLn9p/R1ElLKjBBiCfAYPQNYfielfF0I8RPgeSnlg8BvgT8IId4BuuhJJEVhus/JzScdWNDopk/P8HLzSQcOGd30wYe7+LTdOezopiq3jemDRqWs+9rBho1uErt388O/bmT+a08D8NLHDqN97c84cv7nhm1HSmaoK+854O1T7uj3MsPopnBm9FuEjHd0k8Mi8ceyWAD3oNFN5XZBJC37/w9+P/vey4Gjm2rLHEPe88E4HEOTwcB9tG//GWm7KhnO3UyY2d8o95I43VRM8jndZCSRSGTMc36GIyWOe+7BfdVVWLq7keXlxH/8Y5LnnQeWkXsIJeGeJ9pdDWZ2B3P7F+pe6qebpiydnZ1Kty9aWyk//XTKfvADLN3dpOfPJ/TMMyQXLRo1QYB690LQ7mowszuY298o95I43TSVqaysVLPhXA7HHXfgWbUKEYmQq6ggfuONpM48c9x3a1XmXgS0uxrM7A7m9jfKXfckDCYej0/6Ni3vvUf5KadQtnw5IhIh9bWvEWpsJPWtb03odt4q3IuFdleDmd3B3P5GueuehMEkEonJ21g2i/OXv8R9002IeJxcbS2xNWtIn3JKXnM9TKp7kdHuajCzO5jb3yh3nSQMZrLuT295803Kli7F1tQEQPL004nfeCOygMnR9b311aDd1WFmfz2fhEkxfNx1KoVr7Vp8J5yAramJ3PTphO++m9httxWUIECPGVeFdleHmf2n9HUSUxmXy2VY3daXXsKzdCm2118HIHnOOcSuuw6KNCG6ke5Go93VYGZ3MLe/Ue46SRiM2+0ufqXxOO61a3Fu3ozIZsnOmUNswwYyxx1X1M0Y4j5JaHc1mNkdzO1vlLs+3WQwgUBx78VkffZZfPPm4dqwAXI5EhddROjpp4ueIKD47pOJdleDmd3B3P5GueuehMFUVxflbuYQieBevRrnb36DkJLswQcT3biR7JFHFqf+YSiauwK0uxrM7A7m9jfKXfckDCYcDhdch+3JJ/Edeyyu228Hi4X45ZcT2rbN0AQBxXFXhXZXg5ndwdz+RrnrnoTBFDIRiAgGcV9zDc4//hGAzKc+RWzTJrKHHVYsvVHRE7CoQburw8z+etIhk5Lv2GX7I4/gWb4cS1sb0uEgsWIFiSVLwG4vsuHI6DHjatDu6jCzv75OwqRMdOyy6Oig7IILKD/7bCxtbWQ+/3lC27aRuPTSSU0QoMeMq0K7q8PM/vo6CZMy7mFpUmK/7z48K1di6exEejzEr7mG5IUXgtVqrOQI6OGAatDu6jCz/5QdAiuEqBJCPC6EeLv3/5BbGQohPiOEaBRCvC6EeEUIcYYK13wYz0QgYudOys46i/ILL8TS2Un6+OMJ/eMfJL//fWUJAvQELKrQ7uows79R7sqTBLASeEJKeRDwRO/zwcSA70opPwEsAG4VQkybRMe8CQaDIxdKiePOO/EdfTSORx9Fer1Eb72VyF//Sm7OnElzHIlR3Usc7a4GM7uDuf2Nci+F002nACf0Pt4C/B1YMXAFKeVbAx7vFELsBmqB7slRzJ+ampphl1uam/Fccgn2bdsASH3lK8TWrUPuu+9k6o3KSO5mQLurwczuYG5/o9xLoSdRJ6Xc1fu4DagbbWUhxJGAA3jXaLFiMCS753I4f/UrfMccg33bNnJVVUR+/Wuid91VUgkC9LcqVWh3dZjZ39Q9CSHE/wDDjc+6euATKaUUQow46bYQYjrwB+AcKWVuuHV2797NokWLsNlsZLNZFi5cyOLFi2lra6OsrAyr1UooFKK2tpauri6klNTW1tLe3t4/P2wkEqGurg6/348QgqqqKvx+Pz6fj2w2SzQapb6+nra2Nux2OxUVFXR0dFBRUUEqlSIej/eXRyIRfD4fnZ2d1HZ2UvnDH+J58UUAAv/2b3T86Ec4Zs4k8MEHVFdXEw6HSaVS/a93u904HA6CwSA1NTUEg0HS6XR/udFt8ng8Q9rkcDjwer10dnZSWVlJPB4nkUj0l7tcLtxuN4FAQFmbBtc51vtUSm3KZDK0tLQUvO+paFMgEKCqqsqwz5PRbYrFYrjd7kk9RhSrTX3157vvjXjclXLEY/KkIITYAZwgpdzVmwT+LqU8ZJj1fPScirpRSvnnkeprbGyUc+fONcx3oiSTSZxWK87Nm3GvWYNIJsnV1RFbt470ySer1huVZDKJ0+lUrZEX2l0NZnYHc/sX6t7U1PRCQ0PDEYOXl8LppgeBc3ofnwM8MHgFIYQD+Ctw52gJohTp3rYN74kn4vnJTxDJJMlvf5tQY2PJJwjQY8ZVod3VYWb/qXydxM3AvUKIRUAzcDqAEOII4PtSygt6lx0PVAshzu193blSypcU+I6PZBLXunUcsmEDIpMhO2sWsfXrycyfr9ps3JSVlalWyBvtrgYzu4O5/Y1yV54kpJSdQMMwy58HLuh9/B/Af0yyWt5Yn3+esqVLse7YAUDigguIX3steL2KzSaGVeE1GoWi3dVgZncwt79R7qVwumnqEIvhvuYavAsWYN2xg+wBB/D2b39LfO1a0yUIgFAopFohb7S7GszsDub2N8pdeU9iqmD7xz/wLFuG9V//QlosJC6+mPiKFXgUDwwohNraWtUKeaPd1WBmdzC3v1HuuidRKKEQnssuw/uNb2D917/IHHoo4ccfJ75qFbjddHV1qTbMG+2uBu2uDjP7G+WuexIFYHv8ccouvRTLzp1Iu53EZZf13K11wD1UVA8xLgTtrgbtrg4z+xvlrpNEHoiuLtxXX43znnsAyBx+ONGNG8kdeuiQdXX3VQ3aXQ1mdgdz++vTTSWC/YEH8B11FM577kG6XMSuu47wo48OmyAA2tvbJ9mweGh3NWh3dZjZ3yh33ZMYJ6K9Hc8Pf4jjoYcASB91FLGNG8kdcMCorxvrkvdSRrurQburw8z+RrnrJDEWUuK45x7cV12FpbsbWV5O/Mc/JnneeWDRHTGNRjO10Ue5URCtrZSffjplP/gBlu5u0vPnE3rmGZKLFo07QUQiEYMtjUO7q0G7q8PM/ka5657EcORyOO64A8+qVYhIhFxFBfEbbyR15gkmd5kAAAgZSURBVJkgxISqqqsb9c7nJY12V4N2V4eZ/Y1y1z2JQVjee4/yU06hbPlyRCRC6mtfI9TYSOpb35pwggDw+/0GWE4O2l0N2l0dZvY3yl33JPrIZnH+8pe4b7oJEY+Tq60ltmYN6VNOySs59CEKeK1qtLsatLs6zOxvlLtOEr1YmptxX389IpUiefrpxG+8EVlVVXC9VUWoQxXaXQ3aXR1m9jfKXZ9u6iX3sY8Ru+kmwnffTey224qSIEB3X1Wh3dVgZncwt78+3TQJpM47r+h1+ny+otc5WWh3NWh3dZjZ3yh33ZMwmGw2q1ohb7S7GrS7Oszsb5S78iQhhKgSQjwuhHi793/lKOv6hBCtQojNk+lYCNFoVLVC3mh3NWh3dZjZ3yh35UkCWAk8IaU8CHii9/lIrAaemhSrIlFfX69aIW+0uxq0uzrM7G+UeykkiVOALb2PtwD/33ArCSE+B9QB/z1JXkVBT6yuBu2uBjO7g7n9jXIvhSRRJ6Xc1fu4jZ5EsAdCCAtwC7B8MsWKwf33369aIW+0uxq0uzrM7G+U+6SMbhJC/A8wXF/o6oFPpJRSCDHczBk/AB6RUraOdcHI7t27WbRoETabjWw2y8KFC1m8eDFtbW2UlZVhtVoJhULU1tbS1dWFlJLa2lra29v776IYiUSoq6vD7/cjhKCqqgq/34/P5yObzRKNRqmvr6etrQ273U5FRQUdHR1UVFSQSqWIx+P95S0tLUQiETo7O6msrCQej5NIJPrLXS4XbrebQCBAdXU14XCYVCrVX+52u3E4HASDQWpqaggGg6TT6f5yI9vU3d1Nd3f3kDY5HA68Xm9Jt2nHjh00NzeP+30qpTZt3bqVhQsXFrzvqWhTZ2cniUTCsM+T0W3asWMHgUBgUo8RxWpTd3c30Wg0731vxOO36pmYhBA7gBOklLuEENOBv0spDxm0zh+B44AcUA44gF9IKYf8ftHY2Cjnzp07Cebj45hjjuGZZ55RrZEX2l0N2l0dZvYv1L2pqemFhoaGIwYvL4Uk8VOgU0p5sxBiJVAlpbxilPXPBY6QUi4ZrvyJJ57wA82GyOZBV1dXTVVVVYdqj3zQ7mrQ7uows38R3Gc3NDQMmd6uFJJENXAvsB89B/fTpZRdQogjgO9LKS8YtP65jJIkNBqNRlM8lCcJjUaj0ZQupTC6SaPRaDQlik4SRUIIsUAIsUMI8U7vbyuDy88VQviFEC/1/l0wXD2TjRDid0KI3UKI10YoF0KIjb3tekUIcfhkO47EONxPEEIEB8T8R5PtOBJCiFlCiCeFEG8IIV4XQiwbZp2SjP043Usy9kIIlxDin0KIl3vdrxtmHacQ4p7euP+vEOL/b+9+Quuo4iiOfw81glixYAVLK62iG63/KoSIKEIRxEVFrJCNtS4VEZfiRnCvG10UtIL/0Gp1EUuLFBREqUUpin8qmrix/qeStqAoqcfFTNL4fJNMzLw3EzgfeDDJu4vzLm/uL3Nncu+m4Sf9r5rZmx9nbOe1zBewCpgCLqV48upT4IqeNjuBp9vO2if7zcAW4POK928HDgACxoDDbWdeQvZbgH1t56zItg7YUh6fB3zd5zvTyb6vmb2TfV/25eryeAQ4DIz1tHkA2FUejwN72s69hOyNjzO5kmjGKDBp+1vbfwGvUvwneefZfg/4bYEmdwAvuPAhsKZ8VLl1NbJ3lu0fbR8pj08BR4H1Pc062fc1s3dS2Zezm0GPlK/eG7PzV4HYC2xVB3Yjqpm9cSkSzVgPfDfv52P0P2nuKqcN9kq6eDjRlq3uZ+uqG8rL8wOSrmw7TD/ldMZ1FH8Zztf5vl8gO3S07yWtkvQJ8Atw0HZlv9ueAU4AFww3ZX81skPD40yKxPC8BWyyfTVwkDN/qcTgHAE22r4GeAro3JoLklYDbwAP2z7Zdp6lWCR7Z/ve9mnb1wIbgFFJm9vOVFeN7I2PMykSzfgemF+xN5S/m2P7uO0/yx+fBa4fUrblWvSzdZXtk7OX57b3AyOS1rYca46kEYpB9mXbb/Zp0tm+Xyx71/sewPY08C5wW89bc/0u6SzgfOD4cNMtrCr7IMaZFIlmfARcLukSSWdT3OyamN+gZy55G8U87kowAewon7QZA074zIKMnSbpotm5ZEmjFN/3TpzsZa7dwFHbT1Y062Tf18ne1b6XdKGkNeXxOcCtwFc9zSaAe8vj7cA7Lu8Kt6lO9kGMM9m+tAG2ZyQ9CLxN8aTTc7a/kPQ48LHtCeAhSduAGYqbrTtbCzyPpFconkRZK+kY8BjFDTFs7wL2UzxlMwn8DjS/x+v/VCP7duB+STPAH8B4F0720o3APcBn5RwzwKMUKw90ve/rZO9q368Dnpe0iqJwvWZ7X8+5uht4UdIkxbk63l7cf6mTvfFxJv9xHRERlTLdFBERlVIkIiKiUopERERUSpGIiIhKKRIREVEpRSKiBeVqne+3nSNiMSkSERFRKUUiIiIqpUhEDJCkRyRNSTpVbtJzZ9uZIpYiy3JEDNYUcBPwE3A38JKky9qNFFFfriQiBsj267Z/sP237T3ANxSbVEWsCCkSEQMkaUe51/C0pGlgM9CpJbMjFpLppogBkbQReAbYChyyfbpcNbX1rTAj6sqVRMTgnEuxB/GvAJLuo7iSiFgxUiQiBsT2l8ATwCHgZ+Aq4INWQ0UsUfaTiIiISrmSiIiISikSERFRKUUiIiIqpUhERESlFImIiKiUIhEREZVSJCIiolKKREREVEqRiIiISv8A9Sd+NrP2poQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot that includes the regression line\n",
    "plt.scatter(glass.al, glass.household)\n",
    "plt.plot(glass.al, glass.household_pred, color='red')\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('household')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If **al=3**, what class do we predict for household? **1**\n",
    "\n",
    "If **al=1.5**, what class do we predict for household? **0**\n",
    "\n",
    "We predict the 0 class for **lower** values of al, and the 1 class for **higher** values of al. What's our cutoff value? Around **al=2**, because that's where the linear regression line crosses the midpoint between predicting class 0 and class 1.\n",
    "\n",
    "Therefore, we'll say that if **household_pred >= 0.5**, we predict a class of **1**, else we predict a class of **0**.\n",
    "\n",
    "## $$h_\\beta(x) = \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + ... + \\beta_nx_n$$\n",
    "\n",
    "- $h_\\beta(x)$ is the response\n",
    "- $\\beta_0$ is the intercept\n",
    "- $\\beta_1$ is the coefficient for $x_1$ (the first feature)\n",
    "- $\\beta_n$ is the coefficient for $x_n$ (the nth feature)\n",
    "\n",
    "### if $h_\\beta(x)\\le 0.5$ then $\\hat y = 0$ \n",
    "\n",
    "### if $h_\\beta(x)> 0.5$ then $\\hat y = 1$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['small', 'big', 'small'], dtype='<U5')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# understanding np.where\n",
    "import numpy as np\n",
    "nums = np.array([5, 15, 8])\n",
    "\n",
    "# np.where returns the first value if the condition is True, and the second value if the condition is False\n",
    "np.where(nums > 10, 'big', 'small')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ri</th>\n",
       "      <th>na</th>\n",
       "      <th>mg</th>\n",
       "      <th>al</th>\n",
       "      <th>si</th>\n",
       "      <th>k</th>\n",
       "      <th>ca</th>\n",
       "      <th>ba</th>\n",
       "      <th>fe</th>\n",
       "      <th>glass_type</th>\n",
       "      <th>ri_pred</th>\n",
       "      <th>household</th>\n",
       "      <th>household_pred</th>\n",
       "      <th>household_pred_class</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1.51966</td>\n",
       "      <td>14.77</td>\n",
       "      <td>3.75</td>\n",
       "      <td>0.29</td>\n",
       "      <td>72.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.521227</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.340495</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>1.51115</td>\n",
       "      <td>17.38</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.34</td>\n",
       "      <td>75.41</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6</td>\n",
       "      <td>1.521103</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.315436</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520781</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.250283</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1.52213</td>\n",
       "      <td>14.21</td>\n",
       "      <td>3.82</td>\n",
       "      <td>0.47</td>\n",
       "      <td>71.77</td>\n",
       "      <td>0.11</td>\n",
       "      <td>9.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520781</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.250283</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>1.52320</td>\n",
       "      <td>13.72</td>\n",
       "      <td>3.72</td>\n",
       "      <td>0.51</td>\n",
       "      <td>71.75</td>\n",
       "      <td>0.09</td>\n",
       "      <td>10.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.16</td>\n",
       "      <td>1</td>\n",
       "      <td>1.520682</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.230236</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ri     na    mg    al     si     k     ca   ba    fe  glass_type  \\\n",
       "id                                                                           \n",
       "22   1.51966  14.77  3.75  0.29  72.02  0.03   9.00  0.0  0.00           1   \n",
       "185  1.51115  17.38  0.00  0.34  75.41  0.00   6.65  0.0  0.00           6   \n",
       "40   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1   \n",
       "39   1.52213  14.21  3.82  0.47  71.77  0.11   9.57  0.0  0.00           1   \n",
       "51   1.52320  13.72  3.72  0.51  71.75  0.09  10.06  0.0  0.16           1   \n",
       "\n",
       "      ri_pred  household  household_pred  household_pred_class  \n",
       "id                                                              \n",
       "22   1.521227          0       -0.340495                     0  \n",
       "185  1.521103          1       -0.315436                     0  \n",
       "40   1.520781          0       -0.250283                     0  \n",
       "39   1.520781          0       -0.250283                     0  \n",
       "51   1.520682          0       -0.230236                     0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# transform household_pred to 1 or 0\n",
    "glass['household_pred_class'] = np.where(glass.household_pred >= 0.5, 1, 0)\n",
    "glass.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'household')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the class predictions\n",
    "plt.scatter(glass.al, glass.household)\n",
    "plt.plot(glass.al, glass.household_pred_class, color='red')\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('household')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$h_\\beta(x)$ can be lower 0 or higher than 1, which is countra intuitive\n",
    "\n",
    "## Using Logistic Regression Instead\n",
    "\n",
    "Logistic regression can do what we just did:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fit a logistic regression model and store the class predictions\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg = LogisticRegression(solver='liblinear',C=1e9)\n",
    "feature_cols = ['al']\n",
    "X = glass[feature_cols]\n",
    "y = glass.household\n",
    "logreg.fit(X, y)\n",
    "glass['household_pred_class'] = logreg.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'household')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the class predictions\n",
    "plt.scatter(glass.al, glass.household)\n",
    "plt.plot(glass.al, glass.household_pred_class, color='red')\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('household')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What if we wanted the **predicted probabilities** instead of just the **class predictions**, to understand how confident we are in a given prediction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# store the predicted probabilites of class 1\n",
    "glass['household_pred_prob'] = logreg.predict_proba(X)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'household')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the predicted probabilities\n",
    "plt.scatter(glass.al, glass.household)\n",
    "plt.plot(glass.al, glass.household_pred_prob, color='red')\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('household')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.97161726 0.02838274]]\n",
      "[[0.34361555 0.65638445]]\n",
      "[[0.00794192 0.99205808]]\n"
     ]
    }
   ],
   "source": [
    "# examine some example predictions\n",
    "print(logreg.predict_proba([[1]]))\n",
    "print(logreg.predict_proba([[2]]))\n",
    "print(logreg.predict_proba([[3]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first column indicates the predicted probability of **class 0**, and the second column indicates the predicted probability of **class 1**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Probability, odds, e, log, log-odds\n",
    "\n",
    "$$probability = \\frac {one\\ outcome} {all\\ outcomes}$$\n",
    "\n",
    "$$odds = \\frac {one\\ outcome} {all\\ other\\ outcomes}$$\n",
    "\n",
    "Examples:\n",
    "\n",
    "- Dice roll of 1: probability = 1/6, odds = 1/5\n",
    "- Even dice roll: probability = 3/6, odds = 3/3 = 1\n",
    "- Dice roll less than 5: probability = 4/6, odds = 4/2 = 2\n",
    "\n",
    "$$odds = \\frac {probability} {1 - probability}$$\n",
    "\n",
    "$$probability = \\frac {odds} {1 + odds}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probability</th>\n",
       "      <th>odds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.10</td>\n",
       "      <td>0.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.20</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.50</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.60</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.80</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.90</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   probability      odds\n",
       "0         0.10  0.111111\n",
       "1         0.20  0.250000\n",
       "2         0.25  0.333333\n",
       "3         0.50  1.000000\n",
       "4         0.60  1.500000\n",
       "5         0.80  4.000000\n",
       "6         0.90  9.000000"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a table of probability versus odds\n",
    "table = pd.DataFrame({'probability':[0.1, 0.2, 0.25, 0.5, 0.6, 0.8, 0.9]})\n",
    "table['odds'] = table.probability/(1 - table.probability)\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is **e**? It is the base rate of growth shared by all continually growing processes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.718281828459045"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# exponential function: e^1\n",
    "np.exp(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is a **(natural) log**? It gives you the time needed to reach a certain level of growth:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.999896315728952"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# time needed to grow 1 unit to 2.718 units\n",
    "np.log(2.718)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also the **inverse** of the exponential function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.log(np.exp(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probability</th>\n",
       "      <th>odds</th>\n",
       "      <th>logodds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.10</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>-2.197225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.20</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>-1.386294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>-1.098612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.50</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.60</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.405465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.80</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.386294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.90</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2.197225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   probability      odds   logodds\n",
       "0         0.10  0.111111 -2.197225\n",
       "1         0.20  0.250000 -1.386294\n",
       "2         0.25  0.333333 -1.098612\n",
       "3         0.50  1.000000  0.000000\n",
       "4         0.60  1.500000  0.405465\n",
       "5         0.80  4.000000  1.386294\n",
       "6         0.90  9.000000  2.197225"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add log-odds to the table\n",
    "table['logodds'] = np.log(table.odds)\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  What is Logistic Regression?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Linear regression:** continuous response is modeled as a linear combination of the features:\n",
    "\n",
    "$$y = \\beta_0 + \\beta_1x$$\n",
    "\n",
    "**Logistic regression:** log-odds of a categorical response being \"true\" (1) is modeled as a linear combination of the features:\n",
    "\n",
    "$$\\log \\left({p\\over 1-p}\\right) = \\beta_0 + \\beta_1x$$\n",
    "\n",
    "This is called the **logit function**.\n",
    "\n",
    "Probability is sometimes written as pi:\n",
    "\n",
    "$$\\log \\left({\\pi\\over 1-\\pi}\\right) = \\beta_0 + \\beta_1x$$\n",
    "\n",
    "The equation can be rearranged into the **logistic function**:\n",
    "\n",
    "$$\\pi = \\frac{e^{\\beta_0 + \\beta_1x}} {1 + e^{\\beta_0 + \\beta_1x}}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In other words:\n",
    "\n",
    "- Logistic regression outputs the **probabilities of a specific class**\n",
    "- Those probabilities can be converted into **class predictions**\n",
    "\n",
    "The **logistic function** has some nice properties:\n",
    "\n",
    "- Takes on an \"s\" shape\n",
    "- Output is bounded by 0 and 1\n",
    "\n",
    "We have covered how this works for **binary classification problems** (two response classes). But what about **multi-class classification problems** (more than two response classes)?\n",
    "\n",
    "- Most common solution for classification models is **\"one-vs-all\"** (also known as **\"one-vs-rest\"**): decompose the problem into multiple binary classification problems\n",
    "- **Multinomial logistic regression** can solve this as a single problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 6: Interpreting Logistic Regression Coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'household')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the predicted probabilities again\n",
    "plt.scatter(glass.al, glass.household)\n",
    "plt.plot(glass.al, glass.household_pred_prob, color='red')\n",
    "plt.xlabel('al')\n",
    "plt.ylabel('household')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.64722323])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute predicted log-odds for al=2 using the equation\n",
    "logodds = logreg.intercept_ + logreg.coef_[0] * 2\n",
    "logodds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.91022919])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert log-odds to odds\n",
    "odds = np.exp(logodds)\n",
    "odds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.65638445])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert odds to probability\n",
    "prob = odds/(1 + odds)\n",
    "prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.65638445])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute predicted probability for al=2 using the predict_proba method\n",
    "logreg.predict_proba([[2]])[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['al'], array([4.18040386]))"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine the coefficient for al\n",
    "feature_cols, logreg.coef_[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Interpretation:** A 1 unit increase in 'al' is associated with a 4.18 unit increase in the log-odds of 'household'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9920580839167457"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# increasing al by 1 (so that al=3) increases the log-odds by 4.18\n",
    "logodds = 0.64722323 + 4.1804038614510901\n",
    "odds = np.exp(logodds)\n",
    "prob = odds/(1 + odds)\n",
    "prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.99205808])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute predicted probability for al=3 using the predict_proba method\n",
    "logreg.predict_proba([[3]])[:, 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Bottom line:** Positive coefficients increase the log-odds of the response (and thus increase the probability), and negative coefficients decrease the log-odds of the response (and thus decrease the probability)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-7.71358449])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine the intercept\n",
    "logreg.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Interpretation:** For an 'al' value of 0, the log-odds of 'household' is -7.71."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.00044652])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert log-odds to probability\n",
    "logodds = logreg.intercept_\n",
    "odds = np.exp(logodds)\n",
    "prob = odds/(1 + odds)\n",
    "prob"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That makes sense from the plot above, because the probability of household=1 should be very low for such a low 'al' value."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Logistic regression beta values](https://raw.githubusercontent.com/justmarkham/DAT8/master/notebooks/images/logistic_betas.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changing the $\\beta_0$ value shifts the curve **horizontally**, whereas changing the $\\beta_1$ value changes the **slope** of the curve."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing Logistic Regression with Other Models\n",
    "\n",
    "Advantages of logistic regression:\n",
    "\n",
    "- Highly interpretable (if you remember how)\n",
    "- Model training and prediction are fast\n",
    "- No tuning is required (excluding regularization)\n",
    "- Features don't need scaling\n",
    "- Can perform well with a small number of observations\n",
    "- Outputs well-calibrated predicted probabilities\n",
    "\n",
    "Disadvantages of logistic regression:\n",
    "\n",
    "- Presumes a linear relationship between the features and the log-odds of the response\n",
    "- Performance is (generally) not competitive with the best supervised learning methods\n",
    "- Can't automatically learn feature interactions"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
